# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tensorflow
  namespace: example
spec:
  selector:
    matchLabels:
      pod: tensorflow-pod
  serviceName: tensorflow
  replicas: 1
  template:
    metadata:
      labels:
        pod: tensorflow-pod
    spec:
      nodeSelector:
        cloud.google.com/gke-accelerator: nvidia-l4
      terminationGracePeriodSeconds: 30
      containers:
      - name: tensorflow-container
        image: tensorflow/tensorflow:2.13.0-gpu-jupyter
        env:
        - name: CACHE_DIR
          value: "/tf/cache_dir"
        volumeMounts:
        - name: tensorflow-pvc
          mountPath: /tf/cache_dir
        resources:
            limits:
              nvidia.com/gpu: "1"
              memory: 30Gi
            requests:
              nvidia.com/gpu: "1"
              memory: 30Gi
      volumes:
        - name: tensorflow-pvc
          persistentVolumeClaim:
            claimName: tensorflow-pvc
## Optional: override and set your own token
#        env:
#          - name: JUPYTER_TOKEN
#            value: "jupyter"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: tensorflow-pvc
  namespace: example
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: zonal-rwx
  resources:
    requests:
      storage: 10Ti
---
# Headless service for the above StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: tensorflow
  namespace: example
spec:
  ports:
  - port: 8888
  clusterIP: None
  selector:
    pod: tensorflow-pod
---
# External service
apiVersion: "v1"
kind: "Service"
metadata:
  name: tensorflow-jupyter
  namespace: example
spec:
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 8888
  selector:
    pod: tensorflow-pod
  type: LoadBalancer
